<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<diagram program="umlet" version="14.2">
  <zoom_level>5</zoom_level>
  <element>
    <id>UMLNote</id>
    <coordinates>
      <x>1290</x>
      <y>0</y>
      <w>90</w>
      <h>20</h>
    </coordinates>
    <panel_attributes>Created by Jake Nilson
Updated 2/21/17
bg=magenta</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>1305</x>
      <y>70</y>
      <w>215</w>
      <h>105</h>
    </coordinates>
    <panel_attributes>IntNode
--
- nodeData : int
- nodePointer : IntNode *
--
+ getNodeData() : int
+ getNodePointer() : IntNode *
+ setNodeData(int value) : void
+ setNodePointer(IntNode * next) : void

+ IntNode() : constructor
+ Int Node(int value) : init
+ IntNode(int value4, IntNode * nextNode) : constructor

bg=green
group=2</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>1560</x>
      <y>80</y>
      <w>160</w>
      <h>90</h>
    </coordinates>
    <panel_attributes>IntNodeArray
--
- size : int
- front : intNode *
--
+ IntNodeArray(int size) : constructor
+ setAtIndex(int index, int value) : void
+ getFromIndex(int index) : int
+ getSize() : int
bg=blue
group=2</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>1290</x>
      <y>225</y>
      <w>230</w>
      <h>150</h>
    </coordinates>
    <panel_attributes>Node&lt;Type&gt;
--
Data Members
-nodeData : type
-nodePointer : Node&lt;Type&gt; *
--
Constructors

+ Node() : constructor
+ Node(Type value) : constructor
+ Node(Type data, Node,Type&gt; * pointer) : constructor

Methods

+ getNodeData() Type
+ getNodePointer() : Node&lt;Type&gt; *
+ setNodeData(Type data) : void
+ setNodePointer(Node&lt;Type&gt; * next) : void

bg=red</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>1515</x>
      <y>115</y>
      <w>55</w>
      <h>20</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;&lt;&lt;-
m2=1..n</panel_attributes>
    <additional_attributes>70.0;10.0;90.0;10.0;10.0;10.0</additional_attributes>
  </element>
  <element>
    <id>UMLPackage</id>
    <coordinates>
      <x>1290</x>
      <y>30</y>
      <w>515</w>
      <h>185</h>
    </coordinates>
    <panel_attributes>Typed Sample
--

bg=gray
fg=red
group=2</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>1555</x>
      <y>225</y>
      <w>250</w>
      <h>180</h>
    </coordinates>
    <panel_attributes>Array&lt;Type&gt;
--
Data Members

- front : Node&lt;Type&gt; *
- size : int
--
Constructors
+ Array() : constructor
+ Array(int size) : constructor

Advanced

+ ~Array&lt;Type&gt;() : destructor
+ Array&lt;Type&gt;(const Array&lt;Type&gt; &amp; toBeCopied) : copy constructor

Methods

+ getSize() : int
+ getFront() const : Node&lt;Type&gt; *

+ setAtIndex(int index, Type value) : void
+ getFromIndex(int index) : Type
bg=#800080</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>1515</x>
      <y>295</y>
      <w>50</w>
      <h>20</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;&lt;&lt;-
m2=1..n</panel_attributes>
    <additional_attributes>80.0;10.0;10.0;10.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>1555</x>
      <y>415</y>
      <w>250</w>
      <h>155</h>
    </coordinates>
    <panel_attributes>Model :: List&lt;Type&gt;
--
- size : int
- front : Node&lt;Type&gt;*
- end : Node&lt;Type&gt;*
--
+ List&lt;Type&gt;() : constructor
+ List&lt;Type&gt;(const List&lt;Tlype&gt; &amp; source) : copy constructor
+ ~List&lt;Type&gt;() : destructor

+ addAtIndex(int index, Type value) : void
+ addFront(Type value) : void
+ addEnd(Type value) : void
+ remove(int index) : Type
+ setAtIndex(int index, Type data) : Type
+ getFromIndex(int index) : Type
+ contains(Type data) : bool
+ getSize() const : int
+ getFront() const : Node&lt;Type&gt; *
+ getEnd() const : Node&lt;Type&gt;*
bg=orange</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>1515</x>
      <y>320</y>
      <w>50</w>
      <h>180</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;&lt;&lt;-
m2=0...n</panel_attributes>
    <additional_attributes>80.0;340.0;50.0;340.0;50.0;10.0;10.0;10.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>1310</x>
      <y>370</y>
      <w>110</w>
      <h>70</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;-</panel_attributes>
    <additional_attributes>200.0;10.0;200.0;70.0;10.0;70.0;10.0;120.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>1110</x>
      <y>430</y>
      <w>405</w>
      <h>140</h>
    </coordinates>
    <panel_attributes>BiDirectionalNode&lt;Type&gt;
--
- nodeData : Type
- previous : BiDirectionalNode&lt;Type&gt; *
- next : BiDirectionalNode&lt;Type&gt; *
--
+ BiDirectionalNode() : constructor
+ BiDirectionalNode(Type data) : constructor
+ BiDirectionalNode(Type data, BiDirectionalNode&lt;Type&gt; * previous, BiDirectionalNode&lt;Type&gt; * next) : constructor
+ getNodeData() : Type
+ setNodeData(Type data) : void
+ getPreviousNode() : BiDirectionalNode&lt;Type&gt; *
+ getNextNode() : BiDirectionalNode&lt;Type&gt; *
+ setNextNode(BiDirectionalNode&lt;Type&gt; * next) : void
+ setPreviousNode(BiDirectionalNode&lt;Type&gt; * previous) : void

bg=green</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>765</x>
      <y>130</y>
      <w>250</w>
      <h>120</h>
    </coordinates>
    <panel_attributes>/DoublyLinkedList&lt;/Type&gt;/
--
- front : BiDirectionalNode&lt;Type&gt; *
- end : BiDirectionalNode&lt;Type&gt; *
- size : int
--
Non virtual methods
+ getSize() const : int
+ getFront() const : BiDirectionalNode&lt;Type&gt; *
+ getEnd() const : BiDirectionalNode&lt;Type&gt; *

Virtual Methods
+ add(Type value)
+ remove(int)
bg=pink</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>710</x>
      <y>275</y>
      <w>170</w>
      <h>120</h>
    </coordinates>
    <panel_attributes>Model :: Queue&lt;Type&gt;
--
- front : BiDirectionalNode&lt;Type&gt; *
- end : BiDirectionalNode&lt;Type&gt; *
- size : int
--
+ Queue() : constructor
+ ~Queue() : destructor

+ add(Type data) : void
+ remove(int index) : Type

+ enqueue(Type data) : void
+ dequeue() : Type
+ peek() : Type</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>890</x>
      <y>275</y>
      <w>170</w>
      <h>120</h>
    </coordinates>
    <panel_attributes>Model :: Stack&lt;Type&gt;
--
- front : BiDirectionalNode&lt;Type&gt; *
- end : BiDirectionalNode&lt;Type&gt; *
- size : int
--
+ Stack() : constructor
+ ~Stack() : destructor

+ push(Type data) : void
+ pop() : Type
+ peek() : Type

+ add(Type data) : void
+ remove(int index) : Type</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>1070</x>
      <y>275</y>
      <w>170</w>
      <h>120</h>
    </coordinates>
    <panel_attributes>CircularlyLinkedList
--
- front : BiDirectionalNode&lt;Type&gt; *
- end : BiDirectionalNode&lt;Type&gt; *
- size : int
--
+ CircularList() : constructor
+ ~CircularList() : destructor

+ add(Type data) : void
+ remove(int index) : Type

+ addAtIndex(int index, Type data) : void</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>1010</x>
      <y>190</y>
      <w>275</w>
      <h>250</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;&lt;&lt;-
m2=0..n
fg=blue
lw=2</panel_attributes>
    <additional_attributes>10.0;10.0;510.0;10.0;510.0;480.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>535</x>
      <y>275</y>
      <w>165</w>
      <h>120</h>
    </coordinates>
    <panel_attributes>Model :: DoubleList&lt;Type&gt;
--
- front : BiDirectionalNode&lt;Type&gt; *
- end : BiDirectionalNode&lt;Type&gt; *
- size : int
--
+ DoubleList() : constructor
+ ~DoubleList() : destructor

+ add(Type data) : void
+ remove(int index) : Type

+ addFront(Type data) : void
+ addEnd(Type data) : void
+ addAtIndex(int index, Type data) : void
+ addFastIndex(int index, Type value) : void
</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>875</x>
      <y>245</y>
      <w>290</w>
      <h>40</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;-</panel_attributes>
    <additional_attributes>10.0;10.0;10.0;40.0;560.0;40.0;560.0;60.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>875</x>
      <y>245</y>
      <w>110</w>
      <h>40</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;-</panel_attributes>
    <additional_attributes>10.0;10.0;10.0;40.0;200.0;40.0;200.0;60.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>790</x>
      <y>245</y>
      <w>100</w>
      <h>40</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;-</panel_attributes>
    <additional_attributes>180.0;10.0;180.0;40.0;10.0;40.0;10.0;60.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>610</x>
      <y>245</y>
      <w>280</w>
      <h>40</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;-</panel_attributes>
    <additional_attributes>540.0;10.0;540.0;40.0;10.0;40.0;10.0;60.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>835</x>
      <y>430</y>
      <w>240</w>
      <h>140</h>
    </coordinates>
    <panel_attributes>BinarySearchTreeNode&lt;Type&gt;
--
- nodeData : Type (inherited)
- rootPointer : BinarySearchTreeNode&lt;Type&gt; *
- leftChildPointer : BinarySearchTreeNode&lt;Type&gt; *
- rightChildPointer : BinarySearchTreeNode&lt;Type&gt; *0
--

+ BinarySearchTreeNode() : constructor
+ BinarySearchTreeNode(Type data) : constructor

+ getRootPointer() : BinarySearchTreeNode&lt;Type&gt; *
+ getLeftChildPointer() : BinarySearchTreeNode&lt;Type&gt; *
+ getRightChildPointer() : BinarySearchTreeNode&lt;Type&gt; *

+ setRootChildPointer(BinarySearchTreeNode&lt;Type&gt; * root) : void
+ setLeftChildPointer(BinarySearchTreeNode&lt;Type&gt; * root) : void
+ setRightChildPointer(BinarySearchTreeNode&lt;Type&gt; * root) : void
bg=#9518AD</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>590</x>
      <y>430</y>
      <w>230</w>
      <h>155</h>
    </coordinates>
    <panel_attributes>/Model :: Tree&lt;Type&gt;/
--
- size : int
- height : int
- complete : bool
- balanced : bool
--
+ getSize() : int
+ getHeight() : int
+ isComplete() : bool
+ isBalanced() : bool

+ setSize(int size) : void
+ setHeight(int height) : void
+ setComplete(bool complete) : void
+ setBalanced(bool balanced) : void

+ inOrderTraversal() : void
+ preOrderTraversal() : void
+ postOrderTraversal() : void
bg=gray</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>695</x>
      <y>620</y>
      <w>315</w>
      <h>270</h>
    </coordinates>
    <panel_attributes>Model :: BinarySearchTree&lt;Type&gt;
--
- root : BinarySearchTreeNode&lt;Type&gt; *
- size : int(inherited)
- height : int(inherited)
- complete : bool(inherited)
- balanced : bool(inherited)
--
+ BinarySearchTree() : constructor
+ ~BinarySearchTree() : destructor

+ getRoot() : BinarySearchTreeNode&lt;Type&gt; *
+ setRoot(BinarySearchTreeNode&lt;Type&gt; * root) : void

- calculateSize(BinarySearchTreeNode&lt;Type&gt; *) : int
+ getSize() : int(overridded)

- inOrderTraversal(BinarySearchTreeNode&lt;Type&gt; *) : void
- preOrderTraversal(BinarySearchTreeNode&lt;Type&gt; *) : void
- postOrderTraversal(BinarySearchTreeNode&lt;Type&gt; *) : void
- removeNode(BinarySearchTreeNode&lt;Type&gt; *) : void

+ inOrderTraversal() : void
+ preOrderTraversal() : void
+ postOrderTraversal() : void
+ printToFile() : void

+ insert(Type) : void
+ contains(Type) : bool
+ remove(Type) : void

+ demoTraversalSteps(BinarySearchTreeNode&lt;Type&gt; *) : void
bg=magenta</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>690</x>
      <y>580</y>
      <w>150</w>
      <h>50</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;&lt;&lt;-
m2=0..n</panel_attributes>
    <additional_attributes>10.0;10.0;10.0;50.0;260.0;50.0;260.0;80.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>815</x>
      <y>565</y>
      <w>145</w>
      <h>65</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;-</panel_attributes>
    <additional_attributes>270.0;10.0;270.0;80.0;10.0;80.0;10.0;110.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>955</x>
      <y>370</y>
      <w>465</w>
      <h>70</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;-</panel_attributes>
    <additional_attributes>910.0;10.0;910.0;70.0;10.0;70.0;10.0;120.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>260</x>
      <y>570</y>
      <w>270</w>
      <h>145</h>
    </coordinates>
    <panel_attributes>Model :: HashTable&lt;Type&gt;
--
- long capacity;
- long size;
- double efficiencyPercentage;
- HashNode&lt;Type&gt; * * hashTableStorage;
- bool isPrime(long sampleNumber);
- void resize();
- long nextPrime();
- long findPosition(HashNode&lt;Type&gt; * data);
- long handleCollision(HashNode&lt;Type&gt; * data, long currentPosition);
--
+ HashTable();
+ ~HashTable();
+ void add(Type data);
+ bool remove(Type data);
+ void displayContents();
+ int getSize();
bg=green</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>1020</x>
      <y>620</y>
      <w>325</w>
      <h>145</h>
    </coordinates>
    <panel_attributes>Model :: AVLTree&lt;Type&gt;
--
- BinarySearchTreeNode&lt;Type&gt; * leftRotation (BinarySearchTreeNode&lt;Type&gt; * parent);
- BinarySearchTreeNode&lt;Type&gt; * rightRotation (BinarySearchTreeNode&lt;Type&gt; * parent);
- BinarySearchTreeNode&lt;Type&gt; * leftRightRotation (BinarySearchTreeNode&lt;Type&gt; * parent);
- BinarySearchTreeNode&lt;Type&gt; * rightLeftRotation (BinarySearchTreeNode&lt;Type&gt; * parent);

- BinarySearchTreeNode&lt;Type&gt; * balanceSubTree (BinarySearchTreeNode&lt;Type&gt; * parent);    

- BinarySearchTreeNode&lt;Type&gt; * insertNode(BinarySearchTreeNode&lt;Type&gt; * parent);
- BinarySearchTreeNode&lt;Type&gt; * removeNode(BinarySearchTreeNode&lt;Type&gt; * parent);
    
- int heightDifference(BinarySearchTreeNode&lt;Type&gt; * parent);
--
+ AVLTree();
+ ~AVLTree();

+ void insert(Type itemToInsert);
+ void remove(Type value);
bg=red</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>325</x>
      <y>755</y>
      <w>310</w>
      <h>180</h>
    </coordinates>
    <panel_attributes>Model :: Graph&lt;Type&gt;
--
- static const in MAXIMUM = 20;
- bool adjacencyMatrix [MAXIMUM][MAXIMUM];
- Type graphData[MAXIMUM];
- int vertexCount;
- void depthFirstTraversal(Graph&lt;Type&gt; graph, int vertex, bool markedVerticies[]);
--
+ Graph();
+ ~Graph();
    
+ void addVertex(const Type&amp; value);
+ void addEdge(int source, int target);
+ void removeEdge(int source, int target);
+ Type&amp; operator [] (int vertex);
+ Type operator [] (int vertex) const;
+ int size() const;
+ bool areConnected(int source, int target)const;
+ bool hasUndirectedConncection(int source, int target)const;
+ std::set&lt;int&gt; neighbors(int vertex) const;
+ void depthFirstTraversal(Graph&lt;Type&gt; graph, int vertex);
+ void breadthFirstTraversal(Graph&lt;Type&gt; graph, int vertex);
bg=blue</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>285</x>
      <y>440</y>
      <w>220</w>
      <h>95</h>
    </coordinates>
    <panel_attributes>HashNode&lt;Type&gt;
--
- Type data;
- long key;
--
+ HashNode();
+ HashNode(Type data);

+ Type getData();
+ long getKey() const;
+ void setData(Type data);
bg=yellow</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>390</x>
      <y>370</y>
      <w>1030</w>
      <h>80</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;-</panel_attributes>
    <additional_attributes>2040.0;10.0;2040.0;70.0;10.0;70.0;10.0;140.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>390</x>
      <y>530</y>
      <w>15</w>
      <h>50</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;&lt;&lt;-</panel_attributes>
    <additional_attributes>10.0;10.0;10.0;80.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>945</x>
      <y>565</y>
      <w>250</w>
      <h>65</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;-</panel_attributes>
    <additional_attributes>10.0;10.0;10.0;80.0;480.0;80.0;480.0;110.0</additional_attributes>
  </element>
</diagram>
