<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<diagram program="umlet" version="14.2">
  <zoom_level>7</zoom_level>
  <element>
    <id>UMLNote</id>
    <coordinates>
      <x>1638</x>
      <y>0</y>
      <w>126</w>
      <h>28</h>
    </coordinates>
    <panel_attributes>Created by Jake Nilson
Updated 2/21/17
bg=magenta</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>1659</x>
      <y>98</y>
      <w>301</w>
      <h>147</h>
    </coordinates>
    <panel_attributes>IntNode
--
- nodeData : int
- nodePointer : IntNode *
--
+ getNodeData() : int
+ getNodePointer() : IntNode *
+ setNodeData(int value) : void
+ setNodePointer(IntNode * next) : void

+ IntNode() : constructor
+ Int Node(int value) : init
+ IntNode(int value4, IntNode * nextNode) : constructor

bg=green
group=2</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>2016</x>
      <y>112</y>
      <w>224</w>
      <h>126</h>
    </coordinates>
    <panel_attributes>IntNodeArray
--
- size : int
- front : intNode *
--
+ IntNodeArray(int size) : constructor
+ setAtIndex(int index, int value) : void
+ getFromIndex(int index) : int
+ getSize() : int
bg=blue
group=2</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>1638</x>
      <y>315</y>
      <w>322</w>
      <h>210</h>
    </coordinates>
    <panel_attributes>Node&lt;Type&gt;
--
Data Members
-nodeData : type
-nodePointer : Node&lt;Type&gt; *
--
Constructors

+ Node() : constructor
+ Node(Type value) : constructor
+ Node(Type data, Node,Type&gt; * pointer) : constructor

Methods

+ getNodeData() Type
+ getNodePointer() : Node&lt;Type&gt; *
+ setNodeData(Type data) : void
+ setNodePointer(Node&lt;Type&gt; * next) : void

bg=red</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>1953</x>
      <y>161</y>
      <w>77</w>
      <h>28</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;&lt;&lt;-
m2=1..n</panel_attributes>
    <additional_attributes>70.0;10.0;90.0;10.0;10.0;10.0</additional_attributes>
  </element>
  <element>
    <id>UMLPackage</id>
    <coordinates>
      <x>1638</x>
      <y>42</y>
      <w>721</w>
      <h>259</h>
    </coordinates>
    <panel_attributes>Typed Sample
--

bg=gray
fg=red
group=2</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>2009</x>
      <y>315</y>
      <w>350</w>
      <h>252</h>
    </coordinates>
    <panel_attributes>Array&lt;Type&gt;
--
Data Members

- front : Node&lt;Type&gt; *
- size : int
--
Constructors
+ Array() : constructor
+ Array(int size) : constructor

Advanced

+ ~Array&lt;Type&gt;() : destructor
+ Array&lt;Type&gt;(const Array&lt;Type&gt; &amp; toBeCopied) : copy constructor

Methods

+ getSize() : int
+ getFront() const : Node&lt;Type&gt; *

+ setAtIndex(int index, Type value) : void
+ getFromIndex(int index) : Type
bg=#800080</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>1953</x>
      <y>413</y>
      <w>70</w>
      <h>28</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;&lt;&lt;-
m2=1..n</panel_attributes>
    <additional_attributes>80.0;10.0;10.0;10.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>2009</x>
      <y>581</y>
      <w>350</w>
      <h>217</h>
    </coordinates>
    <panel_attributes>Model :: List&lt;Type&gt;
--
- size : int
- front : Node&lt;Type&gt;*
- end : Node&lt;Type&gt;*
--
+ List&lt;Type&gt;() : constructor
+ List&lt;Type&gt;(const List&lt;Tlype&gt; &amp; source) : copy constructor
+ ~List&lt;Type&gt;() : destructor

+ addAtIndex(int index, Type value) : void
+ addFront(Type value) : void
+ addEnd(Type value) : void
+ remove(int index) : Type
+ setAtIndex(int index, Type data) : Type
+ getFromIndex(int index) : Type
+ contains(Type data) : bool
+ getSize() const : int
+ getFront() const : Node&lt;Type&gt; *
+ getEnd() const : Node&lt;Type&gt;*
bg=orange</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>1953</x>
      <y>448</y>
      <w>70</w>
      <h>252</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;&lt;&lt;-
m2=0...n</panel_attributes>
    <additional_attributes>80.0;340.0;50.0;340.0;50.0;10.0;10.0;10.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>1666</x>
      <y>518</y>
      <w>154</w>
      <h>98</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;-</panel_attributes>
    <additional_attributes>200.0;10.0;200.0;70.0;10.0;70.0;10.0;120.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>1386</x>
      <y>602</y>
      <w>567</w>
      <h>196</h>
    </coordinates>
    <panel_attributes>BiDirectionalNode&lt;Type&gt;
--
- nodeData : Type
- previous : BiDirectionalNode&lt;Type&gt; *
- next : BiDirectionalNode&lt;Type&gt; *
--
+ BiDirectionalNode() : constructor
+ BiDirectionalNode(Type data) : constructor
+ BiDirectionalNode(Type data, BiDirectionalNode&lt;Type&gt; * previous, BiDirectionalNode&lt;Type&gt; * next) : constructor
+ getNodeData() : Type
+ setNodeData(Type data) : void
+ getPreviousNode() : BiDirectionalNode&lt;Type&gt; *
+ getNextNode() : BiDirectionalNode&lt;Type&gt; *
+ setNextNode(BiDirectionalNode&lt;Type&gt; * next) : void
+ setPreviousNode(BiDirectionalNode&lt;Type&gt; * previous) : void

bg=green</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>903</x>
      <y>182</y>
      <w>350</w>
      <h>168</h>
    </coordinates>
    <panel_attributes>/DoublyLinkedList&lt;/Type&gt;/
--
- front : BiDirectionalNode&lt;Type&gt; *
- end : BiDirectionalNode&lt;Type&gt; *
- size : int
--
Non virtual methods
+ getSize() const : int
+ getFront() const : BiDirectionalNode&lt;Type&gt; *
+ getEnd() const : BiDirectionalNode&lt;Type&gt; *

Virtual Methods
+ add(Type value)
+ remove(int)
bg=pink</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>826</x>
      <y>385</y>
      <w>238</w>
      <h>168</h>
    </coordinates>
    <panel_attributes>Model :: Queue&lt;Type&gt;
--
- front : BiDirectionalNode&lt;Type&gt; *
- end : BiDirectionalNode&lt;Type&gt; *
- size : int
--
+ Queue() : constructor
+ ~Queue() : destructor

+ add(Type data) : void
+ remove(int index) : Type

+ enqueue(Type data) : void
+ dequeue() : Type
+ peek() : Type</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>1078</x>
      <y>385</y>
      <w>238</w>
      <h>168</h>
    </coordinates>
    <panel_attributes>Model :: Stack&lt;Type&gt;
--
- front : BiDirectionalNode&lt;Type&gt; *
- end : BiDirectionalNode&lt;Type&gt; *
- size : int
--
+ Stack() : constructor
+ ~Stack() : destructor

+ push(Type data) : void
+ pop() : Type
+ peek() : Type

+ add(Type data) : void
+ remove(int index) : Type</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>1330</x>
      <y>385</y>
      <w>238</w>
      <h>168</h>
    </coordinates>
    <panel_attributes>CircularlyLinkedList
--
- front : BiDirectionalNode&lt;Type&gt; *
- end : BiDirectionalNode&lt;Type&gt; *
- size : int
--
+ CircularList() : constructor
+ ~CircularList() : destructor

+ add(Type data) : void
+ remove(int index) : Type

+ addAtIndex(int index, Type data) : void</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>1246</x>
      <y>266</y>
      <w>385</w>
      <h>350</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;&lt;&lt;-
m2=0..n
fg=blue
lw=2</panel_attributes>
    <additional_attributes>10.0;10.0;510.0;10.0;510.0;480.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>581</x>
      <y>385</y>
      <w>231</w>
      <h>168</h>
    </coordinates>
    <panel_attributes>Model :: DoubleList&lt;Type&gt;
--
- front : BiDirectionalNode&lt;Type&gt; *
- end : BiDirectionalNode&lt;Type&gt; *
- size : int
--
+ DoubleList() : constructor
+ ~DoubleList() : destructor

+ add(Type data) : void
+ remove(int index) : Type

+ addFront(Type data) : void
+ addEnd(Type data) : void
+ addAtIndex(int index, Type data) : void
+ addFastIndex(int index, Type value) : void
</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>1057</x>
      <y>343</y>
      <w>406</w>
      <h>56</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;-</panel_attributes>
    <additional_attributes>10.0;10.0;10.0;40.0;560.0;40.0;560.0;60.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>1057</x>
      <y>343</y>
      <w>154</w>
      <h>56</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;-</panel_attributes>
    <additional_attributes>10.0;10.0;10.0;40.0;200.0;40.0;200.0;60.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>938</x>
      <y>343</y>
      <w>140</w>
      <h>56</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;-</panel_attributes>
    <additional_attributes>180.0;10.0;180.0;40.0;10.0;40.0;10.0;60.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>686</x>
      <y>343</y>
      <w>392</w>
      <h>56</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;-</panel_attributes>
    <additional_attributes>540.0;10.0;540.0;40.0;10.0;40.0;10.0;60.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>1001</x>
      <y>602</y>
      <w>336</w>
      <h>196</h>
    </coordinates>
    <panel_attributes>BinarySearchTreeNode&lt;Type&gt;
--
- nodeData : Type (inherited)
- rootPointer : BinarySearchTreeNode&lt;Type&gt; *
- leftChildPointer : BinarySearchTreeNode&lt;Type&gt; *
- rightChildPointer : BinarySearchTreeNode&lt;Type&gt; *0
--

+ BinarySearchTreeNode() : constructor
+ BinarySearchTreeNode(Type data) : constructor

+ getRootPointer() : BinarySearchTreeNode&lt;Type&gt; *
+ getLeftChildPointer() : BinarySearchTreeNode&lt;Type&gt; *
+ getRightChildPointer() : BinarySearchTreeNode&lt;Type&gt; *

+ setRootChildPointer(BinarySearchTreeNode&lt;Type&gt; * root) : void
+ setLeftChildPointer(BinarySearchTreeNode&lt;Type&gt; * root) : void
+ setRightChildPointer(BinarySearchTreeNode&lt;Type&gt; * root) : void
bg=#9518AD</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>658</x>
      <y>602</y>
      <w>322</w>
      <h>217</h>
    </coordinates>
    <panel_attributes>/Model :: Tree&lt;Type&gt;/
--
- size : int
- height : int
- complete : bool
- balanced : bool
--
+ getSize() : int
+ getHeight() : int
+ isComplete() : bool
+ isBalanced() : bool

+ setSize(int size) : void
+ setHeight(int height) : void
+ setComplete(bool complete) : void
+ setBalanced(bool balanced) : void

+ inOrderTraversal() : void
+ preOrderTraversal() : void
+ postOrderTraversal() : void
bg=gray</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>805</x>
      <y>868</y>
      <w>441</w>
      <h>378</h>
    </coordinates>
    <panel_attributes>Model :: BinarySearchTree&lt;Type&gt;
--
- root : BinarySearchTreeNode&lt;Type&gt; *
- size : int(inherited)
- height : int(inherited)
- complete : bool(inherited)
- balanced : bool(inherited)
--
+ BinarySearchTree() : constructor
+ ~BinarySearchTree() : destructor

+ getRoot() : BinarySearchTreeNode&lt;Type&gt; *
+ setRoot(BinarySearchTreeNode&lt;Type&gt; * root) : void

- calculateSize(BinarySearchTreeNode&lt;Type&gt; *) : int
+ getSize() : int(overridded)

- inOrderTraversal(BinarySearchTreeNode&lt;Type&gt; *) : void
- preOrderTraversal(BinarySearchTreeNode&lt;Type&gt; *) : void
- postOrderTraversal(BinarySearchTreeNode&lt;Type&gt; *) : void
- removeNode(BinarySearchTreeNode&lt;Type&gt; *) : void

+ inOrderTraversal() : void
+ preOrderTraversal() : void
+ postOrderTraversal() : void
+ printToFile() : void

+ insert(Type) : void
+ contains(Type) : bool
+ remove(Type) : void

+ demoTraversalSteps(BinarySearchTreeNode&lt;Type&gt; *) : void
bg=magenta</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>798</x>
      <y>812</y>
      <w>210</w>
      <h>70</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;&lt;&lt;-
m2=0..n</panel_attributes>
    <additional_attributes>10.0;10.0;10.0;50.0;260.0;50.0;260.0;80.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>973</x>
      <y>791</y>
      <w>203</w>
      <h>91</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;-</panel_attributes>
    <additional_attributes>270.0;10.0;270.0;80.0;10.0;80.0;10.0;110.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>1169</x>
      <y>518</y>
      <w>651</w>
      <h>98</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;-</panel_attributes>
    <additional_attributes>910.0;10.0;910.0;70.0;10.0;70.0;10.0;120.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>322</x>
      <y>896</y>
      <w>245</w>
      <h>196</h>
    </coordinates>
    <panel_attributes>Model :: HashTable&lt;Type&gt;
--

--
</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>385</x>
      <y>1183</y>
      <w>224</w>
      <h>140</h>
    </coordinates>
    <panel_attributes>Model :: AVLTree&lt;Type&gt;
--

--</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>238</x>
      <y>735</y>
      <w>238</w>
      <h>133</h>
    </coordinates>
    <panel_attributes>Model :: Graph&lt;Type&gt;
--

--</panel_attributes>
    <additional_attributes/>
  </element>
</diagram>
